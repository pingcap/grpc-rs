dist: xenial
sudo: false
language: rust
git:
  submodules: false

env:
  global:
    - RUST_BACKTRACE=1
    - RUSTFLAGS="--deny=warnings"

rust:
  - stable
  - nightly

matrix:
  include:
  - os: windows
    rust: stable-x86_64-pc-windows-msvc
    install:
      - mkdir -p $HOME/tools
      - export PATH="$HOME/tools/Go/bin:$HOME/tools/bin:$HOME/tools/perl/c/bin:$HOME/tools/perl/perl/bin/:$HOME/tools/perl/perl/site/bin:$PATH"
      - if ! which go 2>/dev/null; then
          wget -nv https://dl.google.com/go/go1.12.7.windows-amd64.zip;
          unzip -q go1.12.7.windows-amd64.zip -d $HOME/tools/;
        fi
      - if ! which yasm 2>/dev/null; then
          mkdir -p $HOME/tools/bin;
          wget -nv https://github.com/yasm/yasm/releases/download/v1.3.0/yasm-1.3.0-win64.exe -O $HOME/tools/bin/yasm.exe;
        fi
      - export GO_ROOT=$HOME/tools/Go
      - if ! which ninja 2> /dev/null; then
          wget -nv https://github.com/ninja-build/ninja/releases/download/v1.9.0/ninja-win.zip;
          unzip ninja-win.zip -d $HOME/tools/bin;
        fi
      - if [[ ! -f $HOME/tools/perl/update_env.pl.bat ]]; then
          mkdir -p $HOME/tool/perl;
          wget -nv http://strawberryperl.com/download/5.30.0.1/strawberry-perl-5.30.0.1-64bit.zip;
          unzip -q strawberry-perl-5.30.0.1-64bit.zip -d $HOME/tools/perl;
          $HOME/tools/perl/relocation.pl.bat;
        fi
      - $HOME/tools/perl/update_env.pl.bat
      - which perl && perl --version
    before_script: 
      - scripts/reset-submodule.cmd
    script:
      - travis_wait cargo build
      - travis_wait cargo test --all

  - os: osx
    rust: stable
    osx_image: xcode10.2

addons:
  apt:
    update: true
    sources:
      - llvm-toolchain-xenial-7
    packages:
      - clang-tidy-7
      - llvm-7-dev
      - libclang-7-dev
      - clang-7

before_script:
  - scripts/reset-submodule.cmd
  - export GRPC_VERSION=1.26.0
  - export PATH="$PATH:$HOME/.cache/bin:$HOME/.cargo/bin"
  - GRPC_HEADER="$HOME/.cache/include/grpc/grpc.h"
  - if [[ $TRAVIS_OS_NAME == "osx" ]] && [[ ! -f $GRPC_HEADER ]]; then
      export CC=clang;
      brew update && brew install autoconf libtool shtool;
    fi
  - if [[ $TRAVIS_OS_NAME == "osx" ]]; then
      brew update && brew install openssl;
      export OPENSSL_ROOT_DIR=$(brew --prefix openssl);
    else
      sudo apt-get update && sudo apt-get -y install libssl-dev;
    fi
  - if [[ ! -f "$GRPC_HEADER" ]] ; then
      (
        git clone -b v$GRPC_VERSION https://github.com/grpc/grpc &&
        cd grpc &&
        git submodule update --init &&
        env prefix=$HOME/.cache make install_c
      );
    fi
  - eval "$(gimme stable)"
  - export CPLUS_INCLUDE_PATH="$HOME/.cache/include"
  - export LD_LIBRARY_PATH="$HOME/.cache/lib"
  - export DYLD_LIBRARY_PATH="$HOME/.cache/lib"
  - export LIBRARY_PATH="$HOME/.cache/lib"
  - export PKG_CONFIG_PATH="$HOME/.cache/lib/pkgconfig"

script:
  - which go && go version
  - if [[ $TRAVIS_OS_NAME == "linux" ]] && [[ $TRAVIS_RUST_VERSION == "stable" ]]; then
      rustup component add rustfmt && cargo fmt --all -- --check;
      scripts/generate-bindings.sh && git diff --exit-code HEAD;
    fi
  - if [[ $TRAVIS_OS_NAME == "linux" ]]; then scripts/lint-grpc-sys.sh && git diff-index --quiet HEAD; fi
  - if [[ $TRAVIS_RUST_VERSION == "stable" ]]; then rustup component add clippy && cargo clippy --all -- -D clippy::all && cargo clippy --all --no-default-features --features prost-codec -- -D clippy::all; fi
  - cargo build --no-default-features
  - cargo build --no-default-features --features protobuf-codec
  - cargo build --no-default-features --features prost-codec
  - cargo build
  - cargo test --all
  - GRPCIO_SYS_USE_PKG_CONFIG=1 RUSTFLAGS="-A unused-attributes" cargo test --all
  - cargo test --features "openssl" --all
  - cargo test --features "openssl-vendored" --all
  - if [[ $TRAVIS_OS_NAME == "linux" ]] && [[ $TRAVIS_RUST_VERSION == "nightly" ]]; then
      env RUST_BACKTRACE=1 RUSTFLAGS="-Z sanitizer=address" cargo test --all --target x86_64-unknown-linux-gnu;
    fi

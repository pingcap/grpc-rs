dist: xenial
sudo: false
language: rust
cache: cargo

env:
  global:
    - RUST_BACKTRACE=1
    - RUSTFLAGS="--deny=warnings"

matrix:
  include:
  - name: linux-stable
    rust: stable
    addons:
      apt:
        sources:
          - llvm-toolchain-xenial-7
        packages:
          - clang-tidy
          - llvm-dev
          - libclang-dev
          - clang

  - name: linux-nightly
    rust: nightly
    addons:
      apt:
        sources:
          - llvm-toolchain-xenial-7
        packages:
          - clang-tidy
          - llvm-dev
          - libclang-dev
          - clang

  - name: win-stable
    os: windows
    rust: stable
    before_script: true
    install:
      - choco install golang
      - PowerShell -Command 'dir -r C:\ -Name gofmt'
      - PowerShell -Command 'go version'
      - go version
      - rustc -V
    script:
      - cargo build
      - cargo test --all

  - name: mac-stable
    os: osx
    rust: stable

before_script:
  - export GRPC_VERSION=1.17.2
  - export PATH="$PATH:$HOME/.cache/bin:$HOME/.cargo/bin"
  - GRPC_HEADER="$HOME/.cache/include/grpc/grpc.h"
  - if [[ $TRAVIS_OS_NAME == "osx" ]] && [[ ! -f $GRPC_HEADER ]]; then
      export CC=clang;
      brew update && brew install autoconf libtool shtool;
    fi
  - if [[ $TRAVIS_OS_NAME == "osx" ]]; then
      brew update && brew install openssl;
      export OPENSSL_ROOT_DIR=$(brew --prefix openssl);
    else
      sudo apt-get update && sudo apt-get -y install libssl-dev;
    fi
  - if [[ ! -f "$GRPC_HEADER" ]] ; then
      (
        git clone -b v$GRPC_VERSION https://github.com/grpc/grpc &&
        cd grpc &&
        git submodule update --init &&
        env prefix=$HOME/.cache make install_c
      );
    fi
  - export CPLUS_INCLUDE_PATH="$HOME/.cache/include"
  - export LD_LIBRARY_PATH="$HOME/.cache/lib"
  - export DYLD_LIBRARY_PATH="$HOME/.cache/lib"
  - export LIBRARY_PATH="$HOME/.cache/lib"
  - export PKG_CONFIG_PATH="$HOME/.cache/lib/pkgconfig"

script:
  - rustup component add rustfmt && cargo fmt --all -- --check
  - if [[ $TRAVIS_OS_NAME == "linux" ]]; then scripts/lint-grpc-sys.sh && git diff-index --quiet HEAD; fi
  - if [[ $TRAVIS_RUST_VERSION == "stable" ]]; then rustup component add clippy && cargo clippy --all --all-features -- -D clippy::all; fi
  - cargo build --no-default-features
  - cargo build --no-default-features --features protobuf-codec
  - cargo build --features prost-codec
  - cargo build
  - cargo test --all
  - GRPCIO_SYS_USE_PKG_CONFIG=1 cargo test --all
  - cargo test --features "openssl" --all
  - cargo test --features "openssl-vendored" --all
